type Query {
    memos: [Memo]! @all
    memo(id: ID! @eq): Memo @find
    gameSession(id: ID! @eq): GameSession @find
}

type Mutation {
    createMemo(input: CreateMemoInput! @spread): Memo @create
    updateImagesMemo(input: UpdateImagesMemoInput! @spread): Memo @update
    deleteMemo(id: ID! @whereKey): Memo @delete
    createGameSession(input: CreateGameSessionInput @spread): GameSession @create
    updateGameSession(id: ID!, retries: Int, state: String): GameSession @update
}

input CreateGameSessionInput {
    memo: CreateGameSessionBelongsTo,
    retries: Int
    number_of_pairs: Int
    state: String
}

input CreateGameSessionBelongsTo {
    connect: ID
}

input UpdateImagesMemoInput {
    id: ID
    images: UpdateImagesBelongsToMany
}

input UpdateImagesBelongsToMany {
    connect: [UpdateImageInput]
    delete: [UpdateImageInput]
}

input UpdateImageInput {
    id: ID
}

input CreateMemoInput {
    name: String!
    images: CreateImagesBelongsToMany
}

input CreateImagesBelongsToMany {
    create: [CreateImageInput!]
}

input CreateImageInput {
    url: String!
}

input UpsertImageInput {
    id: ID!
    url: String!
}

type Memo {
    id: Int!
    name: String
    images: [Image!]! @belongsToMany
}

type GameSession {
    memo: Memo @belongsTo
    retries: Int
    number_of_pairs: Int
    state: String
}

type Image {
    id: Int!
    url: String!
}
